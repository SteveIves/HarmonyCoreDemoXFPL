;;*****************************************************************************
;;
;; Title:       MyApiController.dbl
;;
;; Description: This class defines a WebAPI controller that exposes
;;              various endpoints used to execute routines via the
;;              Harmony Core Traditional Bridge mechanism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.Mvc
import Microsoft.Extensions.Configuration
import Microsoft.Extensions.Options
import Newtonsoft.Json
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

import Services.Controllers

namespace Services.Controllers

    {Route("MyApi")}
    public partial class MyApiController extends ControllerBase

        ;;Services provided via dependency injection
        private _MyApiService, @MyApiService
        private _AppSettings, @IOptions<Services.Models.AppSettings>

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        ;;; <param name="aMyApiService">MyApiService instance provided via dependency injection</param>
        ;;; <param name="aAppSettings">Application settings</param>
        public method MyApiController
            aMyApiService, @MyApiService
			aAppSettings, @IOptions<Services.Models.AppSettings>
        proc
            _MyApiService = aMyApiService
            _AppSettings = aAppSettings
        endmethod

        {Route("AAA_Alpha")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_Alpha, @Task<ActionResult<MyApi.AAA_Alpha_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_Alpha_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_Alpha(aRequest))
        endmethod

        {Route("AAA_AlphaArray")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_AlphaArray, @Task<ActionResult<MyApi.AAA_AlphaArray_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_AlphaArray_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_AlphaArray(aRequest))
        endmethod

        {Route("AAA_AlphaCollection")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_AlphaCollection, @Task<ActionResult<MyApi.AAA_AlphaCollection_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_AlphaCollection_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_AlphaCollection(aRequest))
        endmethod

        {Route("AAA_BinaryHandle")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_BinaryHandle, @Task<ActionResult<MyApi.AAA_BinaryHandle_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_BinaryHandle_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_BinaryHandle(aRequest))
        endmethod

        {Route("AAA_Decimal")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_Decimal, @Task<ActionResult<MyApi.AAA_Decimal_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_Decimal_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_Decimal(aRequest))
        endmethod

        {Route("AAA_DecimalArray")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_DecimalArray, @Task<ActionResult<MyApi.AAA_DecimalArray_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_DecimalArray_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_DecimalArray(aRequest))
        endmethod

        {Route("AAA_DecimalCollection")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_DecimalCollection, @Task<ActionResult<MyApi.AAA_DecimalCollection_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_DecimalCollection_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_DecimalCollection(aRequest))
        endmethod

        {Route("AAA_Enum")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_Enum, @Task<ActionResult<MyApi.AAA_Enum_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_Enum_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_Enum(aRequest))
        endmethod

        {Route("AAA_Handle")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_Handle, @Task<ActionResult<MyApi.AAA_Handle_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_Handle_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_Handle(aRequest))
        endmethod

        {Route("AAA_HatVal")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_AAA_HatVal, @Task<ActionResult<MyApi.AAA_HatVal_Response>>
        proc
            mreturn ok(await _MyApiService.AAA_HatVal())
        endmethod

        {Route("AAA_Implied")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_Implied, @Task<ActionResult<MyApi.AAA_Implied_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_Implied_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_Implied(aRequest))
        endmethod

        {Route("AAA_ImpliedArray")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_ImpliedArray, @Task<ActionResult<MyApi.AAA_ImpliedArray_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_ImpliedArray_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_ImpliedArray(aRequest))
        endmethod

        {Route("AAA_ImpliedCollection")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_ImpliedCollection, @Task<ActionResult<MyApi.AAA_ImpliedCollection_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_ImpliedCollection_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_ImpliedCollection(aRequest))
        endmethod

        {Route("AAA_Integer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_Integer, @Task<ActionResult<MyApi.AAA_Integer_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_Integer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_Integer(aRequest))
        endmethod

        {Route("AAA_IntegerArray")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_IntegerArray, @Task<ActionResult<MyApi.AAA_IntegerArray_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_IntegerArray_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_IntegerArray(aRequest))
        endmethod

        {Route("AAA_IntegerCollection")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_IntegerCollection, @Task<ActionResult<MyApi.AAA_IntegerCollection_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_IntegerCollection_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_IntegerCollection(aRequest))
        endmethod

        {Route("AAA_String")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_String, @Task<ActionResult<MyApi.AAA_String_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_String_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_String(aRequest))
        endmethod

        {Route("AAA_Structure")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_Structure, @Task<ActionResult<MyApi.AAA_Structure_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_Structure_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_Structure(aRequest))
        endmethod

        {Route("AAA_StructureArray")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_StructureArray, @Task<ActionResult<MyApi.AAA_StructureArray_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_StructureArray_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_StructureArray(aRequest))
        endmethod

        {Route("AAA_StructureCollectionAL")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AAA_StructureCollectionAL, @Task<ActionResult<MyApi.AAA_StructureCollectionAL_Response>>
            {FromBody}
            required in aRequest, @MyApi.AAA_StructureCollectionAL_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AAA_StructureCollectionAL(aRequest))
        endmethod

        {Route("AAA_StructureCollectionMH")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_AAA_StructureCollectionMH, @Task<ActionResult<MyApi.AAA_StructureCollectionMH_Response>>
        proc
            mreturn ok(await _MyApiService.AAA_StructureCollectionMH())
        endmethod

        {Route("AddCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddCustomer, @Task<ActionResult<MyApi.AddCustomer_Response>>
            {FromBody}
            required in aRequest, @MyApi.AddCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddCustomer(aRequest))
        endmethod

        {Route("AddItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddItem, @Task<ActionResult<MyApi.AddItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.AddItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddItem(aRequest))
        endmethod

        {Route("AddOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddOrder, @Task<ActionResult<MyApi.AddOrder_Response>>
            {FromBody}
            required in aRequest, @MyApi.AddOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddOrder(aRequest))
        endmethod

        {Route("AddOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddOrderItem, @Task<ActionResult<MyApi.AddOrderItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.AddOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddOrderItem(aRequest))
        endmethod

        {Route("AddVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_AddVendor, @Task<ActionResult<MyApi.AddVendor_Response>>
            {FromBody}
            required in aRequest, @MyApi.AddVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.AddVendor(aRequest))
        endmethod

        {Route("CanDeleteCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteCustomer, @Task<ActionResult<MyApi.CanDeleteCustomer_Response>>
            {FromBody}
            required in aRequest, @MyApi.CanDeleteCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteCustomer(aRequest))
        endmethod

        {Route("CanDeleteItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteItem, @Task<ActionResult<MyApi.CanDeleteItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.CanDeleteItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteItem(aRequest))
        endmethod

        {Route("CanDeleteOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteOrder, @Task<ActionResult<MyApi.CanDeleteOrder_Response>>
            {FromBody}
            required in aRequest, @MyApi.CanDeleteOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteOrder(aRequest))
        endmethod

        {Route("CanDeleteOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteOrderItem, @Task<ActionResult<MyApi.CanDeleteOrderItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.CanDeleteOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteOrderItem(aRequest))
        endmethod

        {Route("CanDeleteVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_CanDeleteVendor, @Task<ActionResult<MyApi.CanDeleteVendor_Response>>
            {FromBody}
            required in aRequest, @MyApi.CanDeleteVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.CanDeleteVendor(aRequest))
        endmethod

        {Route("DeleteCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteCustomer, @Task<ActionResult<MyApi.DeleteCustomer_Response>>
            {FromBody}
            required in aRequest, @MyApi.DeleteCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteCustomer(aRequest))
        endmethod

        {Route("DeleteItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteItem, @Task<ActionResult<MyApi.DeleteItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.DeleteItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteItem(aRequest))
        endmethod

        {Route("DeleteOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteOrder, @Task<ActionResult<MyApi.DeleteOrder_Response>>
            {FromBody}
            required in aRequest, @MyApi.DeleteOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteOrder(aRequest))
        endmethod

        {Route("DeleteOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteOrderItem, @Task<ActionResult<MyApi.DeleteOrderItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.DeleteOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteOrderItem(aRequest))
        endmethod

        {Route("DeleteVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_DeleteVendor, @Task<ActionResult<MyApi.DeleteVendor_Response>>
            {FromBody}
            required in aRequest, @MyApi.DeleteVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.DeleteVendor(aRequest))
        endmethod

        {Route("GetAllCustomers")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllCustomers, @Task<ActionResult<MyApi.GetAllCustomers_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllCustomers())
        endmethod

        {Route("GetAllItems")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllItems, @Task<ActionResult<MyApi.GetAllItems_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllItems())
        endmethod

        {Route("GetAllOrderItems")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetAllOrderItems, @Task<ActionResult<MyApi.GetAllOrderItems_Response>>
            {FromBody}
            required in aRequest, @MyApi.GetAllOrderItems_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetAllOrderItems(aRequest))
        endmethod

        {Route("GetAllOrders")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllOrders, @Task<ActionResult<MyApi.GetAllOrders_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllOrders())
        endmethod

        {Route("GetAllVendors")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Get_GetAllVendors, @Task<ActionResult<MyApi.GetAllVendors_Response>>
        proc
            mreturn ok(await _MyApiService.GetAllVendors())
        endmethod

        {Route("GetCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetCustomer, @Task<ActionResult<MyApi.GetCustomer_Response>>
            {FromBody}
            required in aRequest, @MyApi.GetCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetCustomer(aRequest))
        endmethod

        {Route("GetItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetItem, @Task<ActionResult<MyApi.GetItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.GetItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetItem(aRequest))
        endmethod

        {Route("GetOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetOrder, @Task<ActionResult<MyApi.GetOrder_Response>>
            {FromBody}
            required in aRequest, @MyApi.GetOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetOrder(aRequest))
        endmethod

        {Route("GetOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetOrderItem, @Task<ActionResult<MyApi.GetOrderItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.GetOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetOrderItem(aRequest))
        endmethod

        {Route("GetVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_GetVendor, @Task<ActionResult<MyApi.GetVendor_Response>>
            {FromBody}
            required in aRequest, @MyApi.GetVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.GetVendor(aRequest))
        endmethod

        {Route("UpdateCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateCustomer, @Task<ActionResult<MyApi.UpdateCustomer_Response>>
            {FromBody}
            required in aRequest, @MyApi.UpdateCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateCustomer(aRequest))
        endmethod

        {Route("UpdateItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateItem, @Task<ActionResult<MyApi.UpdateItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.UpdateItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateItem(aRequest))
        endmethod

        {Route("UpdateOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateOrder, @Task<ActionResult<MyApi.UpdateOrder_Response>>
            {FromBody}
            required in aRequest, @MyApi.UpdateOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateOrder(aRequest))
        endmethod

        {Route("UpdateOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateOrderItem, @Task<ActionResult<MyApi.UpdateOrderItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.UpdateOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateOrderItem(aRequest))
        endmethod

        {Route("UpdateVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_UpdateVendor, @Task<ActionResult<MyApi.UpdateVendor_Response>>
            {FromBody}
            required in aRequest, @MyApi.UpdateVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.UpdateVendor(aRequest))
        endmethod

        {Route("ValidateCustomer")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateCustomer, @Task<ActionResult<MyApi.ValidateCustomer_Response>>
            {FromBody}
            required in aRequest, @MyApi.ValidateCustomer_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateCustomer(aRequest))
        endmethod

        {Route("ValidateItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateItem, @Task<ActionResult<MyApi.ValidateItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.ValidateItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateItem(aRequest))
        endmethod

        {Route("ValidateOrder")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateOrder, @Task<ActionResult<MyApi.ValidateOrder_Response>>
            {FromBody}
            required in aRequest, @MyApi.ValidateOrder_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateOrder(aRequest))
        endmethod

        {Route("ValidateOrderItem")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateOrderItem, @Task<ActionResult<MyApi.ValidateOrderItem_Response>>
            {FromBody}
            required in aRequest, @MyApi.ValidateOrderItem_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateOrderItem(aRequest))
        endmethod

        {Route("ValidateVendor")}
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public async method Post_ValidateVendor, @Task<ActionResult<MyApi.ValidateVendor_Response>>
            {FromBody}
            required in aRequest, @MyApi.ValidateVendor_Request
        proc
            if (!ModelState.IsValid)
                mreturn BadRequest()
            mreturn ok(await _MyApiService.ValidateVendor(aRequest))
        endmethod

    endclass

endnamespace
